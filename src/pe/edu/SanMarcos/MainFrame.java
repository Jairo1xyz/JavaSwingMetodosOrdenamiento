
package pe.edu.SanMarcos;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.Calendar;
import java.util.Random;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author mjaxy_000
 */
public class MainFrame extends javax.swing.JFrame {
    
    public static int[] numero;
    static int cantidad=0;
    static boolean valido=false;
    long inicio, fin, comparaciones, intercambios;
    boolean conArchivo=false;
    
    public MainFrame() {
        initComponents();
        StringBuilder time=new StringBuilder();
        Calendar now=Calendar.getInstance();
        int nom_dia=now.get(Calendar.DAY_OF_WEEK);
        int num_dia=now.get(Calendar.DAY_OF_MONTH);
        int nom_mes=now.get(Calendar.MONTH);
        int year=now.get(Calendar.YEAR);
        time.append("Hoy es ");
        switch (nom_dia){
            case 1:
                time.append("domingo ");
                break;
            case 2:
                time.append("lunes ");
                break;
            case 3:
                time.append("martes ");
                break;
            case 4:
                time.append("miercoles ");
                break;
            case 5:
                time.append("jueves ");
                break;
            case 6:
                time.append("viernes ");
                break;
            case 7:
                time.append("sabado ");
                break;
        }
        time.append(num_dia+" de ");
        switch (nom_mes){
            case 0:
                time.append("enero ");
                break;
            case 1:
                time.append("febrero ");
                break;
            case 2:
                time.append("marzo ");
                break;
            case 3:
                time.append("abril ");
                break;
            case 4:
                time.append("mayo ");
                break;
            case 5:
                time.append("junio ");
                break;
            case 6:
                time.append("julio ");
                break;
            case 7:
                time.append("agosto ");
                break;
            case 8:
                time.append("septiembre ");
                break;
            case 9:
                time.append("octubre ");
                break;
            case 10:
                time.append("noviembre ");
                break;
            case 11:
                time.append("diciembre ");
                break;
        }
        time.append("del "+year);
        jLabelTime.setText(time.toString());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jButtonGenerar = new javax.swing.JButton();
        jButtonMostrar = new javax.swing.JButton();
        jButtonOrdenar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaMensajes = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jTextFieldTiempo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldComparaciones = new javax.swing.JTextField();
        jTextFieldIntercambios = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jComboBoxMetodos = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldCantidadNumeros = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jComboBoxForma = new javax.swing.JComboBox();
        jLabelTime = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Comparacion de ordenamientos");
        setName("frameOrdenamiento"); // NOI18N
        setResizable(false);

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jButtonGenerar.setText("Generar numeros");
        jButtonGenerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenerarActionPerformed(evt);
            }
        });

        jButtonMostrar.setText("Mostrar numeros");
        jButtonMostrar.setEnabled(false);
        jButtonMostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMostrarActionPerformed(evt);
            }
        });

        jButtonOrdenar.setText("Ordenar numeros");
        jButtonOrdenar.setEnabled(false);
        jButtonOrdenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOrdenarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonGenerar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(jButtonMostrar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonOrdenar)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonGenerar, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonMostrar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonOrdenar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTextAreaMensajes.setEditable(false);
        jTextAreaMensajes.setColumns(20);
        jTextAreaMensajes.setRows(5);
        jTextAreaMensajes.setText("Primero escoge la cantidad de numeros\naleatorios que deseas generar, luego\npresiona el boton \"Generar numeros\"");
        jScrollPane1.setViewportView(jTextAreaMensajes);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jTextFieldTiempo.setEditable(false);
        jTextFieldTiempo.setText("No se ha ordenado");

        jLabel3.setText("Tiempo que demoro el ordenamiento:");

        jLabel4.setText("Numero de comparaciones:");

        jLabel5.setText("Numero de intercambios:");

        jTextFieldComparaciones.setEditable(false);
        jTextFieldComparaciones.setText("No se ha ordenado");

        jTextFieldIntercambios.setEditable(false);
        jTextFieldIntercambios.setText("No se ha ordenado");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldTiempo, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                    .addComponent(jTextFieldComparaciones)
                    .addComponent(jTextFieldIntercambios))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldTiempo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextFieldComparaciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextFieldIntercambios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jComboBoxMetodos.setMaximumRowCount(10);
        jComboBoxMetodos.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Burbuja", "Burbuja con bandera", "Insercion directa", "Seleccion directa", "Shell", "Quicksort recursivo", "Quicksort iterativo", "Insercion binaria", "Burbuja archivo", "Insercion binaria archivo" }));

        jLabel1.setText("Tipo de ordenamiento a utilizar:");

        jLabel2.setText("Cantidad de numeros aleatorios a generar:");

        jTextFieldCantidadNumeros.setText("10");

        jLabel6.setText("Forma de ordenamiento:");

        jComboBoxForma.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ascendente", "Descendente" }));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBoxMetodos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldCantidadNumeros, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxForma, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldCantidadNumeros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBoxMetodos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jComboBoxForma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabelTime.setText("Esperando...");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabelTime)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelTime))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonMostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMostrarActionPerformed
        if(!valido){
            JOptionPane.showMessageDialog(null, "Debes generar antes los num"
                    + "eros aleatorios!", "Importante", JOptionPane.ERROR_MESSAGE);
        }
        else{
            StringBuilder builder=new StringBuilder();
            builder.setLength(0);
            if(conArchivo){
                File f=new File("C:/carpeta/Archivo de labo2.dat");
                try {
                    RandomAccessFile rf=new RandomAccessFile(f, "rw");
                    for(int i=0; i<cantidad; i++){
                        try {
                            builder.append(rf.readInt()+"\t");
                        } catch (IOException ex) {
                            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        if((i+1)%4==0)
                            builder.append("\n");
                    }
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else{
                
                for(int i=0; i<cantidad; i++){
                    builder.append(numero[i]+"\t");
                    if((i+1)%4==0)
                        builder.append("\n");
                }
            }
            jTextAreaMensajes.setText(builder.toString());
            
        }
        
    }//GEN-LAST:event_jButtonMostrarActionPerformed

    private void jButtonOrdenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOrdenarActionPerformed
        comparaciones=0;
        intercambios=0;
        if(!valido){
            JOptionPane.showMessageDialog(null, "Debes generar antes los num"
                    + "eros aleatorios!", "Importante", JOptionPane.ERROR_MESSAGE);
        }
        else{
            int ind=jComboBoxForma.getSelectedIndex();
            int e=jComboBoxMetodos.getSelectedIndex();
            if(ind==0){
                switch(e){
                    case 0:
                        burbuja(numero, cantidad);
                        break;
                    case 1:
                        burbujaConBandera(numero, cantidad);
                        break;
                    case 2:
                        insercionDirecta(numero, cantidad);
                        break;
                    case 3:
                        seleccionDirecta(numero, cantidad);
                        break;
                    case 4:
                        shell(numero, cantidad);
                        break;
                    case 5:
                        quicksortRecursivo(numero, cantidad);
                        break;
                    case 6:
                        quicksortIterativo(numero, cantidad);
                        break;
                    case 7:
                        insercionBinaria(numero, cantidad);
                        break;
                    case 8:
                        try {
                            burbujaConArchivo(cantidad);
                        } catch (IOException ex) {
                            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;
                    case 9:
                        try {
                            insercionBinariaConArchivo(cantidad);
                        } catch (IOException ex) {
                            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;
                }
            }
            else{
                switch(e){
                    case 0:
                        burbujaDescendente(numero, cantidad);
                        break;
                    case 1:
                        burbujaConBanderaDescendente(numero, cantidad);
                        break;
                    case 2:
                        insercionDirectaDescendente(numero, cantidad);
                        break;
                    case 3:
                        seleccionDirectaDescendente(numero, cantidad);
                        break;
                    case 4:
                        shellDescendente(numero, cantidad);
                        break;
                    case 5:
                        quicksortRecursivoDescendente(numero, cantidad);
                        break;
                    case 6:
                        quicksortIterativoDescendente(numero, cantidad);
                        break;
                    case 7:
                        insercionBinariaDescendente(numero, cantidad);
                    case 8:
                        try {
                            burbujaConArchivoDescendente(cantidad);
                        } catch (IOException ex) {
                            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;
                    case 9:
                        try {
                            insercionBinariaConArchivoDescendente(cantidad);
                        } catch (IOException ex) {
                            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;
                }
            }
            
            
            jTextAreaMensajes.setText("Los numeros ya han sido ordenados");
            jTextFieldTiempo.setText((fin-inicio)+" ms");
            jTextFieldComparaciones.setText(comparaciones+" cs");
            jTextFieldIntercambios.setText(intercambios+" is");
        }
        
    }//GEN-LAST:event_jButtonOrdenarActionPerformed

    private void jButtonGenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenerarActionPerformed
        conArchivo=false;
        try{
            cantidad=Integer.parseInt(jTextFieldCantidadNumeros.getText());
            valido=true;
        }catch(Exception e){
            valido=false;
            jTextAreaMensajes.setText("Debes introducir un numero!\n"
                    + "Error: "+e.getMessage());
        }
        
        if(!valido || cantidad<=1){
            JOptionPane.showMessageDialog(null, "Debes indicar una cantidad "
                    + "valida!", "Importante", JOptionPane.ERROR_MESSAGE);
            valido=false;
            
        }
        else{
            numero=new int[cantidad];
            Random rd=new Random();
            for(int i=0; i<cantidad; i++)
                numero[i]=rd.nextInt();
            try {
                manejarArchivo(numero, numero.length);
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            jTextAreaMensajes.setText("Se han generado "+cantidad+" numeros "
                    + "aleatorios. Puedes mostrar \nlos numeros u ordenarlos");
        }
        jButtonMostrar.setEnabled(valido);
        jButtonOrdenar.setEnabled(valido);
    }//GEN-LAST:event_jButtonGenerarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonGenerar;
    private javax.swing.JButton jButtonMostrar;
    private javax.swing.JButton jButtonOrdenar;
    private javax.swing.JComboBox jComboBoxForma;
    private javax.swing.JComboBox jComboBoxMetodos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabelTime;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaMensajes;
    private javax.swing.JTextField jTextFieldCantidadNumeros;
    private javax.swing.JTextField jTextFieldComparaciones;
    private javax.swing.JTextField jTextFieldIntercambios;
    private javax.swing.JTextField jTextFieldTiempo;
    // End of variables declaration//GEN-END:variables

    /* aqui vienen los algoritmos de busqueda...
     */
    
    public void burbuja(int[] n, int c){
        inicio=System.currentTimeMillis();
        int aux;
        for(int i=0; i<c-1; i++){
            for(int j=c-1; j>i; j--){
                comparaciones++;
                if(n[j]<n[j-1]){
                    aux=n[j];
                    n[j]=n[j-1];
                    n[j-1]=aux;
                    intercambios++;
                }
            }
        }
        fin=System.currentTimeMillis();
    }
    
    public void burbujaConBandera(int[] n, int c){
        inicio=System.currentTimeMillis();
        int aux;
        int i=0;
        boolean flag=true;
        while(i<=c-1 && flag==true){
            flag=false;
            for(int j=c-1; j>i; j--){
                comparaciones++;
                if(n[j]<n[j-1]){
                    intercambios++;
                    aux=n[j];
                    n[j]=n[j-1];
                    n[j-1]=aux;
                    flag=true;
                }
            }
            i++;
        }
        fin=System.currentTimeMillis();
    }
    
    public void insercionDirecta(int[] n, int c){
        inicio=System.currentTimeMillis();
        int aux,k;
        for(int i=1; i<c; i++){
            aux=n[i];
            k=i-1;
            comparaciones++;
            while(k>=0 && aux<n[k]){
                n[k+1]=n[k];
                k--;
                intercambios++;
            }
            n[k+1]=aux;
        }
        fin=System.currentTimeMillis();
    }
    
    public void seleccionDirecta(int[] n, int c){
        inicio=System.currentTimeMillis();
        int menor,k;
        for(int i=0; i<c-1; i++){
            menor=n[i];
            k=i;
            for (int j=i+1; j<c; j++){
                comparaciones++;
                if(n[j]<menor){
                    menor=n[j];
                    k=j;
                    intercambios++;
                }
            }
            n[k]=n[i];
            n[i]=menor;
        }
        fin=System.currentTimeMillis();
    }
    
    public void shell(int[] n, int c){
        inicio=System.currentTimeMillis();
        int razon=c+1,i, aux;
        boolean bandera;
        while(razon>1){
            razon=razon/2;
            bandera=true;
            while(bandera==true){
                bandera=false;
                i=0;
                while((i+razon)<=c-1){
                    comparaciones++;
                    if(n[i]>n[i+razon]){
                        aux=n[i];
                        n[i]=n[i+razon];
                        n[i+razon]=aux;
                        bandera=true;
                        intercambios++;
                    }
                    i++;
                }
            }
        }
        fin=System.currentTimeMillis();
    }
    
    public void quicksortRecursivo(int[] n, int c){
        inicio=System.currentTimeMillis();
        reduceQuicksort(0, c-1);
        fin=System.currentTimeMillis();
    }
    public void reduceQuicksort(int i, int f){
        int izq=i,der=f,pos=i, aux;
        boolean bandera=true;
        while(bandera==true){
            bandera=false;
            comparaciones++;
            while(numero[pos]<=numero[der]&& pos!=der){
                comparaciones++;
                der--;
            }
            if(pos!=der){
                aux=numero[pos];
                numero[pos]=numero[der];
                numero[der]=aux;
                intercambios++;
                pos=der;
                comparaciones++;
                while(numero[pos]>=numero[izq]&&pos!=izq){
                    izq++;
                    comparaciones++;
                }
                if(pos!=izq){
                    aux=numero[pos];
                    numero[pos]=numero[izq];
                    numero[izq]=aux;
                    intercambios++;
                    pos=izq;
                    bandera=true;
                }
            }
        }
        if(pos-1>i)
            reduceQuicksort(i, pos-1);
        if(pos+1<f)
            reduceQuicksort(pos+1, f);
    }
    
    public void quicksortIterativo(int[] n, int c){
        inicio=System.currentTimeMillis();
        Stack S=new Stack();
        int izq=0,der=c-1,p;
        S.push(izq);
        S.push(der);
        while(!S.empty()){
            der=(Integer)S.pop();
            izq=(Integer)S.pop();
            if(der<=izq)
                continue;
            p=particion(n,izq,der);
            if(p-izq>der-p){
                S.push(izq);
                S.push(p-1);
            }
            S.push(p+1);
            S.push(der);
            if(der-p>=p-izq){
                S.push(izq);
                S.push(p-1);
            }
        }
        fin=System.currentTimeMillis();
    }
    public int particion(int[] arr, int izq, int der){
        int x=arr[izq];
        int up=der,down=izq,temp,pj;
        
        while(down<up){
            comparaciones++;
            while(arr[down]<=x && down<up){
                comparaciones++;
                down++;
            }
                
            comparaciones++;
            while(arr[up]>x ){
                comparaciones++;
                up--;
            }
                
            if(down<up){
                temp=arr[down];
                arr[down]=arr[up];
                arr[up]=temp;
                intercambios++;
            }
        }
        arr[izq]=arr[up];
        arr[up]=x;
        pj=up;
        return pj;
    }
    
    public void insercionBinaria(int[] n, int c){
        inicio=System.currentTimeMillis();
        for(int i=1; i<n.length; i++){
            int aux=n[i];
            int izq=0;
            int der=i-1,m;
            while(izq<=der){
                m=(izq+der)/2;
                comparaciones++;
                if(aux<n[m])
                    der=m-1;
                else
                    izq=m+1;
            }
            int j=i-1;
            while(j>=izq){
                n[j+1]=n[j];
                
                j--;
            }
            intercambios++;
            n[izq]=aux;
        }
        fin=System.currentTimeMillis();
    }
    
    
    /*********************************************************************/
    
    public void burbujaDescendente(int[] n, int c){
        inicio=System.currentTimeMillis();
        int aux;
        for(int i=0; i<c-1; i++){
            for(int j=c-1; j>i; j--){
                comparaciones++;
                if(n[j]>n[j-1]){
                    aux=n[j];
                    n[j]=n[j-1];
                    n[j-1]=aux;
                    intercambios++;
                }
            }
        }
        fin=System.currentTimeMillis();
    }
    
    public void burbujaConBanderaDescendente(int[] n, int c){
        inicio=System.currentTimeMillis();
        int aux;
        int i=0;
        boolean flag=true;
        while(i<=c-1 && flag==true){
            flag=false;
            for(int j=c-1; j>i; j--){
                comparaciones++;
                if(n[j]>n[j-1]){
                    aux=n[j];
                    n[j]=n[j-1];
                    n[j-1]=aux;
                    intercambios++;
                    flag=true;
                }
            }
            i++;
        }
        fin=System.currentTimeMillis();
    }
    
    public void insercionDirectaDescendente(int[] n, int c){
        inicio=System.currentTimeMillis();
        int aux,k;
        for(int i=1; i<c; i++){
            aux=n[i];
            k=i-1;
            comparaciones++;
            while(k>=0 && aux>n[k]){
                n[k+1]=n[k];
                intercambios++;
                k--;
            }
            n[k+1]=aux;
        }
        fin=System.currentTimeMillis();
    }
    
    public void seleccionDirectaDescendente(int[] n, int c){
        inicio=System.currentTimeMillis();
        int menor,k;
        for(int i=0; i<c-1; i++){
            menor=n[i];
            k=i;
            for (int j=i+1; j<c; j++){
                comparaciones++;
                if(n[j]>menor){
                    menor=n[j];
                    intercambios++;
                    k=j;
                }
            }
            n[k]=n[i];
            n[i]=menor;
        }
        fin=System.currentTimeMillis();
    }
    
    public void shellDescendente(int[] n, int c){
        inicio=System.currentTimeMillis();
        int razon=c+1,i, aux;
        boolean bandera;
        while(razon>1){
            razon=razon/2;
            bandera=true;
            while(bandera==true){
                bandera=false;
                i=0;
                while((i+razon)<=c-1){
                    comparaciones++;
                    if(n[i]<n[i+razon]){
                        aux=n[i];
                        n[i]=n[i+razon];
                        n[i+razon]=aux;
                        intercambios++;
                        bandera=true;
                    }
                    i++;
                }
            }
        }
        fin=System.currentTimeMillis();
    }
    
    public void quicksortRecursivoDescendente(int[] n, int c){
        inicio=System.currentTimeMillis();
        reduceQuicksortDescendente(0, c-1);
        fin=System.currentTimeMillis();
    }
    public void reduceQuicksortDescendente(int i, int f){
        int izq=i,der=f,pos=i, aux;
        boolean bandera=true;
        while(bandera==true){
            bandera=false;
            comparaciones++;
            while(numero[pos]>=numero[der]&& pos!=der){
                comparaciones++;
                der--;
            }
                
            if(pos!=der){
                aux=numero[pos];
                numero[pos]=numero[der];
                numero[der]=aux;
                intercambios++;
                pos=der;
                comparaciones++;
                while(numero[pos]<=numero[izq]&&pos!=izq){
                    comparaciones++;
                    izq++;
                }
                    
                if(pos!=izq){
                    aux=numero[pos];
                    numero[pos]=numero[izq];
                    numero[izq]=aux;
                    intercambios++;
                    pos=izq;
                    bandera=true;
                }
            }
        }
        if(pos-1>i)
            reduceQuicksortDescendente(i, pos-1);
        if(pos+1<f)
            reduceQuicksortDescendente(pos+1, f);
    }
    
    public void quicksortIterativoDescendente(int[] n, int c){
        inicio=System.currentTimeMillis();
        Stack S=new Stack();
        int izq=0,der=c-1,p;
        S.push(izq);
        S.push(der);
        while(!S.empty()){
            der=(Integer)S.pop();
            izq=(Integer)S.pop();
            if(der<=izq)
                continue;
            p=particionDescendente(n,izq,der);
            if(p-izq>der-p){
                S.push(izq);
                S.push(p-1);
            }
            S.push(p+1);
            S.push(der);
            if(der-p>=p-izq){
                S.push(izq);
                S.push(p-1);
            }
        }
        fin=System.currentTimeMillis();
    }
    public int particionDescendente(int[] arr, int izq, int der){
        int x=arr[izq];
        int up=der,down=izq,temp,pj;
        
        while(down<up){
            comparaciones++;
            while(arr[down]>=x && down<up){
                comparaciones++;
                down++;
            }
                
            comparaciones++;
            while(arr[up]<x ){
                comparaciones++;
                up--;
            }
                
            if(down<up){
                temp=arr[down];
                arr[down]=arr[up];
                arr[up]=temp;
                intercambios++;
            }
        }
        arr[izq]=arr[up];
        arr[up]=x;
        pj=up;
        return pj;
    }
    
    public void insercionBinariaDescendente(int[] n, int c){
        inicio=System.currentTimeMillis();
        for(int i=1; i<n.length; i++){
            int aux=n[i];
            int izq=0;
            int der=i-1,m;
            while(izq<=der){
                m=(izq+der)/2;
                comparaciones++;
                if(aux>n[m])
                    der=m-1;
                else
                    izq=m+1;
            }
            int j=i-1;
            while(j>=izq){
                n[j+1]=n[j];
                
                j--;
            }
            intercambios++;
            n[izq]=aux;
        }
        fin=System.currentTimeMillis();
    }
    
    /*********************************************************************/
    
    public void manejarArchivo(int[] n, int c) throws IOException{
        File f=new File("C:/carpeta");
        if(!f.exists())
            f.mkdir();
        try {
            RandomAccessFile rf=new RandomAccessFile(f+"/Archivo de labo2.dat", "rw");
            for(int i=0; i<n.length; i++){
                rf.writeInt(n[i]);
            }
            rf.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void burbujaConArchivo(int c) throws IOException{
        conArchivo=true;
        File f=new File("C:/carpeta/Archivo de labo2.dat");
        try {
            RandomAccessFile rf=new RandomAccessFile(f, "rw");
            inicio=System.currentTimeMillis();
            int aux;
            for(int i=0; i<c-1; i++){
                for(int j=c-1; j>i; j--){
                    rf.seek(j*4);
                    int pri=rf.readInt();
                    rf.seek((j-1)*4);
                    int seg=rf.readInt();
                    comparaciones++;
                    if(pri<seg){
                        rf.seek(j*4);
                        rf.writeInt(seg);
                        rf.seek((j-1)*4);
                        rf.writeInt(pri);
                        intercambios++;
                    }
                }
            }
            fin=System.currentTimeMillis();
            rf.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void burbujaConArchivoDescendente(int c) throws IOException{
        conArchivo=true;
        File f=new File("C:/carpeta/Archivo de labo2.dat");
        try {
            RandomAccessFile rf=new RandomAccessFile(f, "rw");
            inicio=System.currentTimeMillis();
            int aux;
            for(int i=0; i<c-1; i++){
                for(int j=c-1; j>i; j--){
                    rf.seek(j*4);
                    int pri=rf.readInt();
                    rf.seek((j-1)*4);
                    int seg=rf.readInt();
                    comparaciones++;
                    if(pri>seg){
                        rf.seek(j*4);
                        rf.writeInt(seg);
                        rf.seek((j-1)*4);
                        rf.writeInt(pri);
                        intercambios++;
                    }
                }
            }
            fin=System.currentTimeMillis();
            rf.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void insercionBinariaConArchivo(int c) throws IOException{
        conArchivo=true;
        File f=new File("C:/carpeta/Archivo de labo2.dat");
        try {
            RandomAccessFile rf=new RandomAccessFile(f, "rw");
            inicio=System.currentTimeMillis();
            for(int i=1; i<c; i++){
                rf.seek(i*4);
                int aux=rf.readInt();
                int izq=0;
                int der=i-1,m;
                while(izq<=der){
                    m=(izq+der)/2;
                    rf.seek(m*4);
                    comparaciones++;
                    if(aux<rf.readInt())
                        der=m-1;
                    else
                        izq=m+1;
                }
                int j=i-1;
                while(j>=izq){
                    rf.seek(j*4);
                    int pri=rf.readInt();
                    rf.seek((j+1)*4);
                    rf.writeInt(pri);
                    
                    j--;
                }
                rf.seek(izq*4);
                rf.writeInt(aux);
                intercambios++;
            }
            fin=System.currentTimeMillis();
            rf.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    public void insercionBinariaConArchivoDescendente(int c) throws IOException{
        conArchivo=true;
        File f=new File("C:/carpeta/Archivo de labo2.dat");
        try {
            RandomAccessFile rf=new RandomAccessFile(f, "rw");
            inicio=System.currentTimeMillis();
            for(int i=1; i<c; i++){
                rf.seek(i*4);
                int aux=rf.readInt();
                int izq=0;
                int der=i-1,m;
                while(izq<=der){
                    m=(izq+der)/2;
                    rf.seek(m*4);
                    comparaciones++;
                    if(aux>rf.readInt())
                        der=m-1;
                    else
                        izq=m+1;
                }
                int j=i-1;
                while(j>=izq){
                    rf.seek(j*4);
                    int pri=rf.readInt();
                    rf.seek((j+1)*4);
                    rf.writeInt(pri);
                    
                    j--;
                }
                rf.seek(izq*4);
                rf.writeInt(aux);
                intercambios++;
            }
            fin=System.currentTimeMillis();
            rf.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
